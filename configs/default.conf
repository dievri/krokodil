# nginx.vh.default.conf  --  docker-openresty
#
# This file is installed to:
#   `/etc/nginx/conf.d/default.conf`
#
# It tracks the `server` section of the upstream OpenResty's `nginx.conf`.
#
# This config (and any other configs in `etc/nginx/conf.d/`) is loaded by
# default by the `include` directive in `/usr/local/openresty/nginx/conf/nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#


server {
    
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/local/openresty/nginx/html;
        index  index.html index.htm;
    }

    location /api-hello {
        default_type text/html;
        content_by_lua '
        ngx.say(ngx.localtime())
        ';
    }

     location /papi-pello {
        default_type text/html;
        content_by_lua '
        ngx.say(ngx.localtime() .. "hello")
        ';
    }

    location /pello {
        default_type text/html;
        content_by_lua '
        ngx.say(ngx.localtime())
        ';
    }


    location /post-image {
      resolver 127.0.0.11;
        
	default_type application/json;
	content_by_lua ' 
        
		local cjson = require "cjson"
		local get, post, files = require "resty.reqargs"()
		ngx.status = ngx.HTTP_OK
        local hash = ngx.md5(post["keyword"])
         local http = require "resty.http"
         local httpc = http.new()
          local res, err = httpc:request_uri(post["imageURL"], {
            method ="GET",
            keepalive_timeout = 60,
        keepalive_pool = 10,
        ssl_verify = false
        })
         if not res then
        ngx.say("failed to request: ", err)
        return
           end

        ngx.say(res.headers["Content-Type"])
        local i, j = string.find(res.headers["Content-Type"], "%/")
        local ext = string.sub(res.headers["Content-Type"], i+1)
         ngx.say(ext)
        
        local path="/tmp/" .. hash .. "." .. ext

        local f = assert(io.open(path, "wb")) -- open in "binary" mode
        f:write(res.body)
        f:close()

         local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 sec

              
                local ok, err = red:connect("redis", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                ok, err = red:set(post["keyword"], path)
                if not ok then
                    ngx.say("failed to set keyword: ", err)
                    return
                end

                ngx.say("set result: ", ok)

                local res, err = red:get(post["keyword"])
                if not res then
                    ngx.say("failed to get keyword: ", err)
                    return
                end

                if res == ngx.null then
                    ngx.say("keyword not found.")
                    return
                end

                ngx.say(post["keyword"] .. ":", res)


        --local file = "/tmp/"
        --local f = assert(io.open(file .. hash .. "." .. ext, "w"))
        --f:write("Hello, md5")
        --f:close()
		--ngx.say(cjson.encode(hash))
		return ngx.exit(ngx.HTTP_OK)
	';
	
    }

    location /get-images {
	resolver 127.0.0.11;
        
	default_type application/json;
	content_by_lua ' 
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 sec

              
                local ok, err = red:connect("redis", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                end
		local cjson = require "cjson"
	local value = {}
	for i = 1, 9, 1 do
		local res, error = red:randomkey()
		if not res then 
			ngx.say("failed to get random key: ", error)
			return
		else
			value[i] = {[res] = red:get(res)}
			
		end
	end
	ngx.say(cjson.encode(value))
         	
	';

	}


    location /post-image-test {
        resolver 8.8.8.8;
        content_by_lua '
        -- retrieve the content of a URL
         local http = require "resty.http"
         local httpc = http.new()
        local res, err = httpc:request_uri("http://pbs.twimg.com/media/CCROQ8vUEAEgFke.jpg", {
            method ="GET",
            keepalive_timeout = 60,
        keepalive_pool = 10
        })
         if not res then
        ngx.say("failed to request: ", err)
        return
           end

        
        


        -- save the content to a file
        local f = assert(io.open("/tmp/"test.jpg", "wb")) -- open in "binary" mode
        f:write(res.body)
        f:close()
        return ngx.exit(ngx.HTTP_OK)
    ';
    }

 location /test {
            content_by_lua_block {
                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 sec

                -- or connect to a unix domain socket file listened
                -- by a redis server:
                --     local ok, err = red:connect("unix:/path/to/redis.sock")

                local ok, err = red:connect("172.21.0.3", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                ok, err = red:set("dog", "an animal")
                if not ok then
                    ngx.say("failed to set dog: ", err)
                    return
                end

                ngx.say("set result: ", ok)

                local res, err = red:get("dog")
                if not res then
                    ngx.say("failed to get dog: ", err)
                    return
                end

                if res == ngx.null then
                    ngx.say("dog not found.")
                    return
                end

                ngx.say("dog: ", res)

                red:init_pipeline()
                red:set("cat", "Marry")
                red:set("horse", "Bob")
                red:get("cat")
                red:get("horse")
                local results, err = red:commit_pipeline()
                if not results then
                    ngx.say("failed to commit the pipelined requests: ", err)
                    return
                end

                for i, res in ipairs(results) do
                    if type(res) == "table" then
                        if res[1] == false then
                            ngx.say("failed to run command ", i, ": ", res[2])
                        else
                            -- process the table value
                        end
                    else
                        -- process the scalar value
                    end
                end

                -- put it into the connection pool of size 100,
                -- with 10 seconds max idle time
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                    return
                end

                -- or just close the connection right away:
                -- local ok, err = red:close()
                -- if not ok then
                --     ngx.say("failed to close: ", err)
                --     return
                -- end
            }
        }



    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           /usr/local/openresty/nginx/html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}
