# nginx.vh.default.conf  --  docker-openresty
#
# This file is installed to:
#   `/etc/nginx/conf.d/default.conf`
#
# It tracks the `server` section of the upstream OpenResty's `nginx.conf`.
#
# This config (and any other configs in `etc/nginx/conf.d/`) is loaded by
# default by the `include` directive in `/usr/local/openresty/nginx/conf/nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#


server {
    
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        root   /usr/local/openresty/nginx/html;
        index  index.html index.htm;
    }

    location /api-hello {
        default_type text/html;
        content_by_lua '
        ngx.say(ngx.localtime())
        ';
    }


    location /post-image {
        resolver 8.8.8.8;
        
	default_type application/json;
	content_by_lua ' 
        
		local cjson = require "cjson"
		local get, post, files = require "resty.reqargs"()
		ngx.status = ngx.HTTP_OK
        local hash = ngx.md5(post["keyword"])
         local http = require "resty.http"
         local httpc = http.new()
          local res, err = httpc:request_uri(post["imageURL"], {
            method ="GET",
            keepalive_timeout = 60,
        keepalive_pool = 10,
        ssl_verify = false
        })
         if not res then
        ngx.say("failed to request: ", err)
        return
           end

        ngx.say(res.headers["Content-Type"])
        local i, j = string.find(res.headers["Content-Type"], "%/")
        local ext = string.sub(res.headers["Content-Type"], i+1)
         ngx.say(ext)
        


        local f = assert(io.open("/tmp/" .. hash .. ext, "wb")) -- open in "binary" mode
        f:write(res.body)
        f:close()


        --local file = "/tmp/"
        --local f = assert(io.open(file .. hash .. "." .. ext, "w"))
        --f:write("Hello, md5")
        --f:close()
		--ngx.say(cjson.encode(hash))
		return ngx.exit(ngx.HTTP_OK)
	';
	
    }

    location /post-image-test {
        resolver 8.8.8.8;
        content_by_lua '
        -- retrieve the content of a URL
         local http = require "resty.http"
         local httpc = http.new()
        local res, err = httpc:request_uri("http://pbs.twimg.com/media/CCROQ8vUEAEgFke.jpg", {
            method ="GET",
            keepalive_timeout = 60,
        keepalive_pool = 10
        })
         if not res then
        ngx.say("failed to request: ", err)
        return
           end

        -- save the content to a file
        local f = assert(io.open("/tmp/"test.jpg", "wb")) -- open in "binary" mode
        f:write(res.body)
        f:close()
        return ngx.exit(ngx.HTTP_OK)
    ';
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           /usr/local/openresty/nginx/html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}
